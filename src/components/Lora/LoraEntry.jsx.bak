import React, { useState, useEffect } from 'react';
import { processLoraWeight, showInputError, processLoraInput } from '../../utils/paramProcessor';

/**
 * Lora条目组件
 * 用于单个Lora条目的显示和编辑，符合截图中的UI界面
 */
function LoraEntry({ index, lora, onUpdate, onRemove, onAddToNotepad }) {
  // 本地状态用于控制输入值
  const [localModel, setLocalModel] = useState(lora.model);
  const [localWeight, setLocalWeight] = useState(lora.weight.toString());
  
  // 同步状态
  useEffect(() => {
    setLocalModel(lora.model);
    setLocalWeight(lora.weight.toString());
  }, [lora.model, lora.weight]);
  
  // 更新Lora模型
  const handleModelChange = (e) => {
    const value = e.target.value;
    setLocalModel(value);
    
    // 暂时不更新全局状态，等待验证
    if (value.trim() === '') {
      onUpdate(index, 'model', '');
      return;
    }
    
    // 使用严格的正则处理Lora输入
    const result = processLoraInput(value);
    
    // 如果验证成功，更新全局状态
    if (result.isValid) {
      onUpdate(index, 'model', result.value);
    }
    // 如果验证失败，显示错误但不更新全局状态
    else if (e.target) {
      showInputError(e.target, '请输入有效的数字ID或tensor.art链接');
    }
  };

  // 更新Lora权重
  const handleWeightChange = (e) => {
    const value = e.target.value;
    setLocalWeight(value);
    
    // 如果输入为空，不更新全局状态
    if (value === '') return;
    
    // 处理权重输入值
    try {
      const numValue = parseFloat(value);
      
      // 验证有效范围
      if (isNaN(numValue)) {
        if (e.target) {
          showInputError(e.target, '请输入有效的数字');
        }
        return;
      }
      
      if (numValue < 0 || numValue > 2) {
        if (e.target) {
          showInputError(e.target, '权重必须在0到2之间');
        }
        return;
      }
      
      onUpdate(index, 'weight', numValue);
    } catch (error) {
      console.error('处理Lora权重时出错:', error);
    }
  };

  return (
    <div className="lora-entry" data-index={index}>
      <div className="lora-entry-header">
        <div className="lora-number">Lora {index + 1}:</div>
        <button 
          className="delete-lora" 
          type="button"
          onClick={() => onRemove(index)}
        >
          ×
        </button>
      </div>
      <div className="lora-entry-content">
        <div className="lora-input-container">
          <input 
            type="text" 
            className="lora-model-input"
            placeholder="输入Lora模型名称"
            value={localModel}
            onChange={handleModelChange}
            onBlur={() => {
              // 当失去焦点时进行最终验证
              if (localModel.trim() === '') {
                // 如果为空，允许清除
                setLocalModel('');
                onUpdate(index, 'model', '');
                return;
              }
              
              // 检查是否符合纯数字ID或tensor.art链接格式
              const modelId = localModel.trim();
              const idPattern = /^\d+$/;
              const urlPattern = /^(?:https?:\/\/)?tensor\.art\/models\/(\d+)(?:\/[^\/?#]*)?/;
              
              if (!idPattern.test(modelId) && !urlPattern.test(modelId)) {
                // 无效的模型ID，显示错误并恢复原始值
                showInputError(document.querySelector(`[data-index="${index}"] .lora-model-input`), 
                               '请输入有效的数字ID或tensor.art链接');
                
                // 恢复到原始值（如果有）或清空
                if (lora.model && idPattern.test(lora.model) || urlPattern.test(lora.model)) {
                  setLocalModel(lora.model);
                } else {
                  setLocalModel('');
                  onUpdate(index, 'model', '');
                }
              } else {
                // 是有效ID，提取数字ID
                let finalId = modelId;
                const urlMatch = modelId.match(urlPattern);
                if (urlMatch) {
                  finalId = urlMatch[1];
                }
                
                // 更新状态
                setLocalModel(finalId);
                onUpdate(index, 'model', finalId);
              }
            }}
          />
          <button 
            className="add-to-notepad" 
            type="button" 
            title="添加到记事本"
            onClick={() => onAddToNotepad(localModel)}
          >
            +N
          </button>
        </div>
        <div className="lora-weight-container">
          <label className="lora-weight-label">权重:</label>
          <input 
            type="text" 
            className="lora-weight-input"
            value={localWeight}
            onChange={handleWeightChange}
            onBlur={() => {
              // 当失去焦点时进行最终验证
              try {
                const numValue = parseFloat(localWeight);
                
                if (isNaN(numValue)) {
                  // 恢复到原始值或默认值
                  const defaultValue = lora.weight ? lora.weight.toString() : "1";
                  setLocalWeight(defaultValue);
                  onUpdate(index, 'weight', parseFloat(defaultValue));
                  return;
                }
                
                // 验证范围并处理
                if (numValue < 0 || numValue > 2) {
                  // 显示错误
                  showInputError(document.querySelector(`[data-index="${index}"] .lora-weight-input`), '权重必须在0到2之间');
                  
                  // 将值限制在范围内
                  const processedWeight = Math.max(0, Math.min(2, numValue));
                  setLocalWeight(processedWeight.toString());
                  onUpdate(index, 'weight', processedWeight);
                } else {
                  // 正常更新
                  setLocalWeight(numValue.toString());
                  onUpdate(index, 'weight', numValue);
                }
              } catch (error) {
                // 出错时恢复默认值
                setLocalWeight("1");
                onUpdate(index, 'weight', 1);
              }
            }}
            placeholder="0-2"
          />
        </div>
      </div>
    </div>
  );
}

export default LoraEntry; 